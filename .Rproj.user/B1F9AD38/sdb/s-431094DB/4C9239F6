{
    "collab_server" : "",
    "contents" : "#' Reading data from a file\n#'\n#' This function checks whether a file exists or not and if the file\n#' does exist, the data from the file is read and stored within the\n#' data variable.\n#'\n#' @parameter filename A file from which the data has to be read\n#'\n#' @return This function stores the value of a data frame from the file\n#'\n#' @import file.exists()\n#' @import stop()\n#' @import read_csv() from the readr package\n#' @import tbl_df() from the dplyr package\n#'\n#'\n#' @examples\n#' fars_read('accident.csv')\n#'\n#  @export\n\nfars_read <- function(filename) {\n  if(!file.exists(filename))\n    stop(\"file '\", filename, \"' does not exist\")\n  data <- suppressMessages({\n    readr::read_csv(filename, progress = FALSE)\n  })\n  dplyr::tbl_df(data)\n}\n\n#' Changing the filename according to the accident year\n#'\n#' This function adds up the year of the accident to\n#' the filename and prints it.\n#'\n#'\n#' @parameter year An integer which specifies the year of accident\n#'\n#' @return This function returns the value of the filename\n#'\n#' @import as.integer()\n#' @import sprintf()\n#'\n#' @note Passing any other data type value can cause an error\n#'\n#'\n#' @examples\n#' make_filename(2015)\n#' make_filename(2013)\n#'\n#' @export\n#'\n\n\nmake_filename <- function(year) {\n  year <- as.integer(year)\n  sprintf(\"accident_%d.csv.bz2\", year)\n}\n#' Selecting month and year from given file and operating on given input\n#'\n#' This function performs a select operation on the set of data and returns the required\n#' years\n#'\n#'\n#' @parameter years A numeric value on which the operation is performed\n#'\n#' @return This function returns a vector of the selected years\n#'\n#' @import make_filename()\n#' @import tryCatch()\n#' @import warning()\n#' @import lappy()\n#'\n#'\n#' @examples\n#' fars_read_years(2015)\n#'\n#' @export\n#'\nfars_read_years <- function(years) {\n  lapply(years, function(year) {\n    file <- make_filename(year)\n    tryCatch({\n      dat <- fars_read(file)\n      dplyr::mutate(dat, year = year) %>%\n        dplyr::select(MONTH, year)\n    }, error = function(e) {\n      warning(\"invalid year: \", year)\n      return(NULL)\n    })\n  })\n}\n#' Summarizing data according to the years\n#'\n#' This function stores the vector of years which is returned from the fars_read_years\n#' function and summarize the given data according to the years and months\n#'\n#'\n#' @parameter years A numeric value which has to be operated on\n#'\n#' @return This function returns the summary of the data grouping the months and the years\n#'\n#' @import fars_read_years()\n#' @import bind_rows()\n#' @import spread() from the tidyr package\n#' @import group_by() from the dplyr package\n#' @import summary() from the dplyr package\n#'\n#'\n#' @examples\n#' fars_summarize_years(2014)\n#'\n#' @export\n#'\nfars_summarize_years <- function(years) {\n  dat_list <- fars_read_years(years)\n  dplyr::bind_rows(dat_list) %>%\n    dplyr::group_by(year, MONTH) %>%\n    dplyr::summarize(n = n()) %>%\n    tidyr::spread(year, n)\n}\n\n#' Mapping the state\n#'\n#' This function maps the input state identifying them\n#' by the state number and year\n#'\n#' @parameter year A numeric value of the accident year\n#' @parameter state.num The input of state number\n#'\n#' @return This function returns the map of the input state\n#'\n#' @import make_filename()\n#' @import fars_read()\n#' @import as.integer()\n#' @import tbl_df()\n#'\n#'\n#' @examples\n#' fars_map_state(1 , 2015)\n#'\n#' @export\n#'\n\n\nfars_map_state <- function(state.num, year) {\n  filename <- make_filename(year)\n  data <- fars_read(filename)\n  state.num <- as.integer(state.num)\n\n  if(!(state.num %in% unique(data$STATE)))\n    stop(\"invalid STATE number: \", state.num)\n  data.sub <- dplyr::filter(data, STATE == state.num)\n  if(nrow(data.sub) == 0L) {\n    message(\"no accidents to plot\")\n    return(invisible(NULL))\n  }\n  is.na(data.sub$LONGITUD) <- data.sub$LONGITUD > 900\n  is.na(data.sub$LATITUDE) <- data.sub$LATITUDE > 90\n  with(data.sub, {\n    maps::map(\"state\", ylim = range(LATITUDE, na.rm = TRUE),\n              xlim = range(LONGITUD, na.rm = TRUE))\n    graphics::points(LONGITUD, LATITUDE, pch = 46)\n  })\n}\n",
    "created" : 1500477546805.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "3644787058",
    "id" : "4C9239F6",
    "lastKnownWriteTime" : 1500477592,
    "last_content_update" : 1500477592303,
    "path" : "~/Package/R/fars_functions.R",
    "project_path" : "R/fars_functions.R",
    "properties" : {
        "tempName" : "Untitled1"
    },
    "relative_order" : 4,
    "source_on_save" : false,
    "source_window" : "",
    "type" : "r_source"
}